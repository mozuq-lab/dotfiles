[[plugins]]
repo = 'Shougo/vimproc.vim'
if = '! has("nvim")'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'make -f make_mingw64.mak'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/unite.vim'
if = '! has("nvim")'
lazy = 1
hook_add = '''
  nnoremap <silent> <Leader>, :<C-u>Unite<CR>
  nnoremap <silent> <Leader>R :<C-u>UniteResume<CR>
  nnoremap <silent> <Leader>b :<C-u>Unite buffer<CR>
  nnoremap <silent> <Leader>r :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <silent> <Leader>f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
  nnoremap <silent> <Leader>g :<C-u>Unite grep<CR>
  " depend yankround,,
  nnoremap <silent> <Leader>y :<C-u>Unite yankround<CR>
  let g:unite_enable_start_insert = 1
  let g:unite_source_history_yank_enable = 1
  let g:unite_source_file_mru_limit = 100
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("nvim")'
lazy = 1
hook_add = '''
  nnoremap <silent> <Leader>R :<C-u>Denite -resume<CR>
  nnoremap <silent> <Leader>r :<C-u>Denite register<CR>
  nnoremap <silent> <Leader>b :<C-u>Denite buffer<CR>
  nnoremap <silent> <Leader>f :<C-u>Denite file/rec<CR>
  nnoremap <silent> <Leader>g :<C-u>Denite grep<CR>
'''
hook_post_source = '''
  call denite#custom#map('normal', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('normal', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
if = '! has("nvim")'
on_source = 'unite.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  if &t_Co == 16
    let g:lightline = {'colorscheme': '16color'}
  endif
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  let g:yankround_dir=$HOME . '/.vim/yankround'
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#555555 ctermbg=2
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#666666 ctermbg=3
'''

[[plugins]]
repo = 'pepo-le/fcitx-mem-re'
if = 'has("unix")'

[[plugins]]
repo = 'pepo-le/win-ime-con.nvim'
if = 'has("win32")'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent> <Leader>e :<C-u>NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
  let g:nerdtree_tabs_open_on_gui_startup = 0
  nmap <Leader>E <Plug>NERDTreeTabsToggle<CR>
'''

#************************************************
# Session
#************************************************
[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'xolox/vim-session'
depends = 'vim-misc'
hook_add = '''
  let g:session_directory = '~/.vim/sessions'
  " 現在のディレクトリ直下の .vimsessions/ を取得
  let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
  " 存在すれば
  if isdirectory(s:local_session_directory)
    let g:session_directory = s:local_session_directory
    let g:session_autosave = 'yes'
    let g:session_autoload = 'yes'
    " 自動保存
    let g:session_autosave_periodic = 0
  else
    let g:session_autosave = 'no'
    let g:session_autoload = 'no'
  endif
  unlet s:local_session_directory
'''

#************************************************
# Coding
#************************************************
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = '! has("nvim")'
on_i = 1
hook_add = '''
  "- Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  let g:neocomplete#enable_at_startup = 1
  "- Use smartcase, camelcase, underbar
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplcache_enable_camel_case_completion = 0
  let g:neocomplcache_enable_underbar_completion = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
  let g:neocomplete#data_directory = $HOME.'/.vim/neocomplete/cache'
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
  \ }
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'
  "- Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()
  "- Recommended key-mappings.
  "- <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
    "- For no inserting <CR> key.
    "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
  endfunction
  "- <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  "inoremap <expr><C-y>  neocomplete#close_popup()
  "inoremap <expr><C-e>  neocomplete#cancel_popup()
  "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"
  inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
  "- Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
  "- Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
  "- Python
  autocmd FileType python setlocal omnifunc=jedi#completions
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'neosnippet'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)"
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = 'nmap <F8> :TagbarToggle<CR>'

[[plugins]]
repo = 'kana/vim-smartinput'
hook_add = '''
  call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
  call smartinput#define_rule({
              \   'at'    : '{\%#}',
              \   'char'  : '<Space>',
              \   'input' : '<Space><Space><Left>',
              \   })
  call smartinput#map_to_trigger('i', '(', '(', '(')
  call smartinput#define_rule({
              \   'at'    : '(\%#)',
              \   'char'  : '(',
              \   'input' : '<Right>;<Left><Left>',
              \   })
  call smartinput#map_to_trigger('i', '>', '>', '>')
  call smartinput#define_rule({
              \   'at'        : '>\%#',
              \   'char'      : '>',
              \   'input'     : '<BS>->',
              \   'filetype'  : ['php']
              \   })
  call smartinput#map_to_trigger('i', '>', '>', '>')
  call smartinput#define_rule({
              \   'at'    : '->\%#',
              \   'char'  : '>',
              \   'input' : '<BS><BS>=><Space>',
              \   'filetype'  : ['php']
              \   })
  call smartinput#map_to_trigger('i', '?', '?', '?')
  call smartinput#define_rule({
              \   'at'    : '<?\%#',
              \   'char'  : '?',
              \   'input' : '=<Space><Space>?><LEFT><LEFT><LEFT>',
              \   })
'''

[[plugins]]
repo = 'sgur/vim-editorconfig'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_leader_key = '<c-e>'
  let g:user_emmet_settings = {
  \   'html': {
  \       'lang': "ja"
  \   }
  \ }
'''

[[plugins]]
repo = 'captbaritone/better-indent-support-for-php-with-html'
on_ft = 'php'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'

#************************************************
# Markdonw
#************************************************
[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'md'
hook_add = '''
  augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  augroup END
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = 'md'

#************************************************
# Syntax
#************************************************
[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_mode_map = { 'mode': 'passive',
    \ 'active_filetypes': [''],
    \ 'passive_filetypes': [''] }
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 0
  let g:syntastic_auto_jump = 0
  let g:syntastic_check_on_wq = 0
  let g:syntastic_javascript_checkers = ['eslint']
  let g:syntastic_php_checkers = ['php']
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_lint_on_enter = 0
  let g:ale_linters = {
  \   'javascript': ['eslint'],
  \   'go': ['golint'],
  \   'php': ['php', 'phpcs', 'phpmd'],
  \   'python': ['pylint'],
  \   'java': ['javac'],
  \}
  let g:ale_php_phpcs_standard = 'PSR2'
  let g:ale_php_phpcs_use_global = 1
  let g:ale_python_pylint_executable = 'pylint3'
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
  let g:polyglot_disabled = ['php']
'''

[[plugins]]
repo = 'nikvdp/ejs-syntax'
on_ft = 'ejs'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'vim-scripts/jQuery'

#************************************************
# Git
#************************************************
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
